
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include "./EventEmitters.h"


namespace facebook {
namespace react {

void NoCodegenSampleViewCAPIEventEmitter::onDirectEvent(OnDirectEvent $event) const {
  dispatchEvent("directEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "intTest", $event.intTest);
$payload.setProperty(runtime, "intWithDefault", $event.intWithDefault);
$payload.setProperty(runtime, "floatTest", $event.floatTest);
$payload.setProperty(runtime, "floatWithDefaultTest", $event.floatWithDefaultTest);
$payload.setProperty(runtime, "doubleTest", $event.doubleTest);
$payload.setProperty(runtime, "doubleWithDefaultTest", $event.doubleWithDefaultTest);
$payload.setProperty(runtime, "stringTest", $event.stringTest);
$payload.setProperty(runtime, "stringWithDefaultTest", $event.stringWithDefaultTest);
$payload.setProperty(runtime, "booleanTest", $event.booleanTest);
$payload.setProperty(runtime, "booleanWithDefaultTest", $event.booleanWithDefaultTest);

    auto arrayTest = jsi::Array(runtime, $event.arrayTest.size());
    size_t arrayTestIndex = 0;
    for (auto arrayTestValue : $event.arrayTest) {
      arrayTest.setValueAtIndex(runtime, arrayTestIndex++, arrayTestValue);
    }
    $payload.setProperty(runtime, "arrayTest", arrayTest);
  
$payload.setProperty(runtime, "stringEnumTest", toString($event.stringEnumTest));

    auto readOnlyArrayTest = jsi::Array(runtime, $event.readOnlyArrayTest.size());
    size_t readOnlyArrayTestIndex = 0;
    for (auto readOnlyArrayTestValue : $event.readOnlyArrayTest) {
      readOnlyArrayTest.setValueAtIndex(runtime, readOnlyArrayTestIndex++, readOnlyArrayTestValue);
    }
    $payload.setProperty(runtime, "readOnlyArrayTest", readOnlyArrayTest);
  
$payload.setProperty(runtime, "colorTest", $event.colorTest);
    return $payload;
  });
}


void NoCodegenSampleViewCAPIEventEmitter::onBubblingEvent(OnBubblingEvent $event) const {
  dispatchEvent("bubblingEvent", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "intTest", $event.intTest);
$payload.setProperty(runtime, "intWithDefault", $event.intWithDefault);
$payload.setProperty(runtime, "floatTest", $event.floatTest);
$payload.setProperty(runtime, "floatWithDefaultTest", $event.floatWithDefaultTest);
$payload.setProperty(runtime, "doubleTest", $event.doubleTest);
$payload.setProperty(runtime, "doubleWithDefaultTest", $event.doubleWithDefaultTest);
$payload.setProperty(runtime, "stringTest", $event.stringTest);
$payload.setProperty(runtime, "stringWithDefaultTest", $event.stringWithDefaultTest);
$payload.setProperty(runtime, "booleanTest", $event.booleanTest);
$payload.setProperty(runtime, "booleanWithDefaultTest", $event.booleanWithDefaultTest);

    auto arrayTest = jsi::Array(runtime, $event.arrayTest.size());
    size_t arrayTestIndex = 0;
    for (auto arrayTestValue : $event.arrayTest) {
      arrayTest.setValueAtIndex(runtime, arrayTestIndex++, arrayTestValue);
    }
    $payload.setProperty(runtime, "arrayTest", arrayTest);
  
$payload.setProperty(runtime, "stringEnumTest", toString($event.stringEnumTest));

    auto readOnlyArrayTest = jsi::Array(runtime, $event.readOnlyArrayTest.size());
    size_t readOnlyArrayTestIndex = 0;
    for (auto readOnlyArrayTestValue : $event.readOnlyArrayTest) {
      readOnlyArrayTest.setValueAtIndex(runtime, readOnlyArrayTestIndex++, readOnlyArrayTestValue);
    }
    $payload.setProperty(runtime, "readOnlyArrayTest", readOnlyArrayTest);
  
$payload.setProperty(runtime, "colorTest", $event.colorTest);
    return $payload;
  });
}


void NoCodegenSampleViewCAPIEventEmitter::onReceivedCommandArgs(OnReceivedCommandArgs $event) const {
  dispatchEvent("receivedCommandArgs", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "intTest", $event.intTest);
$payload.setProperty(runtime, "floatTest", $event.floatTest);
$payload.setProperty(runtime, "doubleTest", $event.doubleTest);
$payload.setProperty(runtime, "stringTest", $event.stringTest);
$payload.setProperty(runtime, "booleanTest", $event.booleanTest);
    return $payload;
  });
}

} // namespace react
} // namespace facebook
